// Generated by CoffeeScript 1.4.0
var Loader, Shotgun;

if (!Shotgun) {
  Shotgun = {};
}

Shotgun.Loader = Loader = (function() {

  Loader.prototype.scriptMax = 0.2;

  Loader.prototype.scriptLength = 106;

  Loader.prototype.styleMax = 0.2;

  Loader.prototype.styleLength = 50;

  Loader.prototype.dataMax = 0.6;

  Loader.prototype.dataLength = 1000000;

  Loader.prototype.debug = true;

  Loader.prototype.width = 960;

  Loader.prototype.height = 500;

  Loader.prototype.twoPi = 2 * Math.PI;

  Loader.prototype.progress = 0;

  function Loader(options) {
    this.options = options || {};
    if (this.options.debug != null) {
      this.debug = this.options.debug;
    }
  }

  Loader.prototype.log = function(from, msg) {
    if (from && msg) {
      if (this.debug) {
        return console.log("Shotgun.Loader " + from + ": " + msg);
      }
    } else if (from) {
      if (this.debug) {
        return console.log(from);
      }
    }
  };

  Loader.prototype.start = function() {
    var _this = this;
    this.formatPercent = d3.format(".0%");
    this.log('start', 'options:');
    this.log(this.options);
    this.render();
    return this.loadScript(function() {
      return _this.loadStyle(function() {
        return _this.loadData(function() {
          _this.log("start", "all ready, starting app");
          clearInterval(_this.interval);
          _this.meter.transition().delay(250).attr("transform", "scale(0)");
          return _this.options.ready();
        });
      });
    });
  };

  Loader.prototype.render = function() {
    this.arc = d3.svg.arc().startAngle(0).innerRadius(180).outerRadius(240);
    this.svg = d3.select("body").append("svg").attr("width", this.width).attr("height", this.height).append("g").attr("transform", "translate(" + this.width / 2 + "," + this.height / 2 + ")");
    this.meter = this.svg.append("g").attr("class", "progress-meter");
    this.meter.append("path").attr("class", "background").attr("d", this.arc.endAngle(this.twoPi));
    this.foreground = this.meter.append("path").attr("class", "foreground");
    return this.text = this.meter.append("text").attr("text-anchor", "middle").attr("dy", ".35em");
  };

  Loader.prototype.updateProgress = function(progress) {};

  Loader.prototype.loadScript = function(cb) {
    var loaded, xhr,
      _this = this;
    this.log("loadScript", "loading " + this.options.url.js);
    loaded = false;
    xhr = d3.xhr("" + this.options.url.js);
    xhr.on("progress", function() {
      return _this.transition(_this.progress + ((d3.event.loaded / _this.scriptLength) * _this.scriptMax));
    });
    return xhr.get(function(error, data) {
      eval(data.response.toString());
      _this.transition(_this.scriptMax);
      return cb();
    });
  };

  Loader.prototype.loadStyle = function(cb) {
    var xhr,
      _this = this;
    this.log("loadStyle", "loading " + this.options.url.css);
    xhr = d3.xhr("" + this.options.url.css);
    xhr.on("progress", function() {
      return _this.transition(_this.progress + ((d3.event.loaded / _this.styleLength) * _this.styleMax));
    });
    return xhr.get(function(error, data) {
      console.log('styles:', data.response);
      $('head').append("<style>" + data.response + "</style>");
      _this.transition(_this.scriptMax + _this.styleMax);
      return cb();
    });
  };

  Loader.prototype.callRecursive = function(i, cb) {
    var _this = this;
    if (this.options.functions[i]) {
      return this.options.functions[i](function() {
        var cur;
        cur = _this.scriptMax + _this.styleMax + (i + 1) * _this.dataMax / _this.options.functions.length;
        if (cur > _this.progress) {
          _this.transition(cur);
        }
        i++;
        if (_this.options.functions[i]) {
          return _this.callRecursive(i, cb);
        } else {
          return cb();
        }
      });
    } else {
      return cb();
    }
  };

  Loader.prototype.loadData = function(cb) {
    var _this = this;
    this.log("loadData", "loading data");
    this.interval = setInterval(function() {
      if (_this.progress < 0.99) {
        _this.progress += 0.001;
        _this.foreground.attr("d", _this.arc.endAngle(_this.twoPi * _this.progress));
        return _this.text.text(_this.formatPercent(_this.progress));
      }
    }, 20);
    return this.callRecursive(0, cb);
  };

  Loader.prototype.transition = function(cur) {
    var _this = this;
    console.log('transition', cur);
    return d3.transition().tween("progress", function() {
      return function(t) {
        var i;
        if (_this.progress < 0.99) {
          i = d3.interpolate(_this.progress, cur);
          _this.progress = i(t);
          _this.foreground.attr("d", _this.arc.endAngle(_this.twoPi * _this.progress));
          return _this.text.text(_this.formatPercent(_this.progress));
        }
      };
    });
  };

  return Loader;

})();
